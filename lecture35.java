// // Given a string write a method to return all its subsequences(order has to be same in all the sequences) in an arraylist . A String is a subsequences of a given String that is generated by deleting some character of a given string without changing its order.
// input : abc ; total number of sequences will be 2^n sequences.
// output : a, b, c, ab, bc, ac, abc,___.

// **important Question
// import java.util.ArrayList;

// public class lecture35 {
//     // s = abc
//     static ArrayList<String> getSSQ(String s){
//         ArrayList<String> ans = new ArrayList<>();
//         // base case

//         if(s.length() ==0){
//             ans.add("");
//             return ans;
//         }
//         char curr = s.charAt(0);  // a
//         ArrayList<String> smallAns = getSSQ(s.substring(1)); //["bc","b","c",""]

//         // smallAns = //["bc","b","c",""]


//         // ans = ["bc","b","c","","abc","ab","ac","a"]
//         for(String ss: smallAns){
//             ans.add(ss);//bc
//             ans.add(curr + ss); //abc
//         }
//         return ans;
    

 

//     }
//     public static void main(String[] args) {
//         ArrayList<String> ans = getSSQ ("abc");
//         for(String ss : ans){
//             System.out.println(ss);
//         }
        
//     }
    
// }


// 2. Given a string, write a method to print all its subsequences with void method . we have to print the all the subsequences wihtout storing them anywhere . don't have to make the array list of subsequences to store the string .
//  time complexity is O(n^2)

// public class lecture35 {
    
//     static void printSSQ(String s, String currAns){ // s ="abc",currAns="";
//     if(s.length()==0){
//         System.out.println(currAns);
//         return;
//     }
//         char curr = s.charAt(0);//a
//         String remString = s.substring(1);//bc 

    
//         // curr char --> choose to be a part of currAns 
//         printSSQ(remString, currAns + curr); //bc, a
//         printSSQ(remString, currAns);



//         // curr char ---> does not choose to be a part of currANs 
//         printSSQ(remString, currAns);
// }
 

    
//     public static void main(String[] args) {
//         printSSQ("abc","");
        
//     }
// }

// 3.Given an array of integers, print sums of all subsets in it. output sums can be printed in any oreder.

// input: arr[]= {2,3}
// output: 0,2,3,5


   public class lecture35 {
    
        static void subsetSum(int[] a, int n, int idx, int sum){
            if(idx>= n){
                System.out.println(sum);
                return;
            }
            // Include
            subsetSum(a, n, idx+1, sum+a[idx] );

            // Exclude
            subsetSum(a, n, idx+1, sum);
            

            


        }
       
    
        
        public static void main(String[] args) {
            int[] a = {2,4,5};
            subsetSum(a, a.length, 0 ,0);
            
        }
    }
    

